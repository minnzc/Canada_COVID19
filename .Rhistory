runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
province_plot_cumulative_impact = function(cv_cases, plot_date, covid = c("Cases", "Deaths", "Recovered"), eimpact=c("Layoffs")) {
plot_df = subset(cv_cases, date<=plot_date)
max_scale1 = max(get_max(cv_cases$outcome1))
max_scale2 = max(get_max(cv_cases$outcome2))
g1 = ggplot(plot_df, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", region,
"\n", covid, ": ", outcome1,
"\n", eimpact, ": ", outcome2))) +
geom_line(aes(y=outcome1, colour = covid, group = 1), alpha=0.8) + geom_point(aes(y=outcome1, colour = covid, group = 1), size = 2, alpha = 0.8) +
geom_line(aes(y=outcome2/5, colour = eimpact, group = 2), alpha=0.8) + geom_point(aes(y=outcome2/5, colour = eimpact, group = 2), size = 3, alpha = 0.8, shape = 2) +
scale_y_continuous(sec.axis = sec_axis(~.*5, name = eimpact)) + xlab("Date") + ylab(covid) + theme_bw() + scale_colour_manual(values=c(covid_col, covid_other_col)) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
# clean date variables and extract min/max dates in data
cv_cases_province$date = as.Date(cv_cases_province$date)
cv_cases_province$last_update = as.Date(cv_cases_province$last_update)
cv_cases_canada$date = as.Date(cv_cases_canada$date)
cv_cases_canada$last_update = as.Date(cv_cases_canada$last_update)
cv_min_date = as.Date(min(cv_cases_canada$date),"%Y-%m-%d")
current_date = as.Date(max(cv_cases_canada$date),"%Y-%m-%d")
province_plot_cumulative_impact(cv_cases_canada, current_date, "Cases", "Layoffs")
province_plot_cumulative_impact = function(cv_cases, plot_date, covid = c("Cases", "Deaths", "Recovered"), eimpact=c("Layoffs")) {
plot_df = subset(cv_cases, date<=plot_date)
max_scale1 = max(get_max(cv_cases$cases))
max_scale2 = max(get_max(cv_cases$layoffs))
g1 = ggplot(plot_df, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", region,
"\n", covid, ": ", cases,
"\n", eimpact, ": ", layoffs))) +
geom_line(aes(y=cases, colour = covid, group = 1), alpha=0.8) + geom_point(aes(y=cases, colour = covid, group = 1), size = 2, alpha = 0.8) +
geom_line(aes(y=layoffs/5, colour = eimpact, group = 2), alpha=0.8) + geom_point(aes(y=layoffs/5, colour = eimpact, group = 2), size = 3, alpha = 0.8, shape = 2) +
scale_y_continuous(sec.axis = sec_axis(~.*5, name = eimpact)) + xlab("Date") + ylab(covid) + theme_bw() + scale_colour_manual(values=c(covid_col, covid_other_col)) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
province_plot_cumulative_impact(cv_cases_canada, current_date, "Cases", "Layoffs")
province_plot_cumulative_impact = function(cv_cases, plot_date, covid = c("Cases", "Deaths", "Recovered"), eimpact=c("Layoffs")) {
plot_df = subset(cv_cases, date<=plot_date)
max_scale1 = max(get_max(cv_cases$cases))
max_scale2 = max(get_max(cv_cases$layoffs))
g1 = ggplot(plot_df, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", country,
"\n", covid, ": ", cases,
"\n", eimpact, ": ", layoffs))) +
geom_line(aes(y=cases, colour = covid, group = 1), alpha=0.8) + geom_point(aes(y=cases, colour = covid, group = 1), size = 2, alpha = 0.8) +
geom_line(aes(y=layoffs/5, colour = eimpact, group = 2), alpha=0.8) + geom_point(aes(y=layoffs/5, colour = eimpact, group = 2), size = 3, alpha = 0.8, shape = 2) +
scale_y_continuous(sec.axis = sec_axis(~.*5, name = eimpact)) + xlab("Date") + ylab(covid) + theme_bw() + scale_colour_manual(values=c(covid_col, covid_other_col)) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
ggplotly(g1, tooltip = c("text")) %>% layout(legend = list(font = list(size=11)))
}
province_plot_cumulative_impact(cv_cases_canada, current_date, "Cases", "Layoffs")
runApp()
g1 = ggplot(cv_cases_canada, aes(x = date)) +
geom_line(aes(y = cases), size = 1, color = "darkblue") +
geom_line(aes(y= 2*layoffs), size = 1.5, color="red") +
scale_y_continuous(sec.axis = sec_axis(~./2, name = "response2"))
g1
g1 = ggplot(cv_cases_canada, aes(x = date)) +
geom_line(aes(y = cases), size = 1, color = "darkblue") +
geom_line(aes(y= 2*layoffs), size = 1.5, color="red") +
scale_y_continuous(sec.axis = sec_axis(~./2, name = "response2")) +
axis(1, ylim(0, 1000))
runApp()
g1 = ggplot(cv_cases_canada, aes(x = date)) +
geom_line(aes(y = cases, group = 1), size = 1, color = "darkblue") + geom_point(aes(y=cases, group = 1), size = 2, alpha = 0.8 color = "darkblue") +
geom_line(aes(y= 2*layoffs, group = 2), size = 1.5, color="red") +
scale_y_continuous(sec.axis = sec_axis(~./2, name = "response2"))
g1 = ggplot(cv_cases_canada, aes(x = date)) +
geom_line(aes(y = cases, group = 1), size = 1, color = "darkblue") + geom_point(aes(y=cases, group = 1), size = 2, alpha = 0.8 color = "darkblue") + geom_line(aes(y= 2*layoffs, group = 2), size = 1.5, color="red") +
scale_y_continuous(sec.axis = sec_axis(~./2, name = "response2"))
g1 = ggplot(cv_cases_canada, aes(x = date)) +
geom_line(aes(y = cases, group = 1), size = 1, color = "darkblue") + geom_point(aes(y=cases, group = 1), size = 2, alpha = 0.8 color = "darkblue") + geom_line(aes(y= 2*layoffs, group = 2), size = 1.5, color="red") + scale_y_continuous(sec.axis = sec_axis(~./2, name = "response2"))
g1 = ggplot(cv_cases_canada, aes(x = date)) +
geom_line(aes(y = cases, group = 1), size = 1, color = "darkblue") + geom_point(aes(y=cases, group = 1), size = 2, alpha = 0.8, color = "darkblue") + geom_line(aes(y= 2*layoffs, group = 2), size = 1.5, color="red") + scale_y_continuous(sec.axis = sec_axis(~./2, name = "response2"))
g1
runApp()
runApp()
runApp()
geom_line(yaxis = "y2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
cls = c(covid_col, death_col, recovered_col, covid_other_col)
cls_names = c("Cases", "Deaths", "Recovered", "Layoffs")
graphs_cols = cls[1:length(cls_names)]
names(graphs_cols) = cls_names
graphs_cols
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
g1 = ggplot(cv_cases_canada, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", country,
"\n", covid, ": ", cases,
"\n", eimpact, ": ", reservations))) +
geom_line(aes(y=cases, colour = covid, group = 1), alpha=0.8) + geom_point(aes(y=cases, colour = covid, group = 1), size = 2, alpha = 0.8) +
xlab("Date") + ylab("Number of people") + theme_bw() + scale_colour_manual(values=graphs_cols) + ylim(0, max_scale1) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
runApp()
runApp()
runApp()
runApp()
runApp()
g1 = ggplot(cv_cases_canada, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", country,
"\n", covid, ": ", cases,
"\n", eimpact, ": ", reservations))) +
geom_line(aes(y=cases, colour = covid, group = 1), alpha=0.8) + geom_point(aes(y=cases, colour = covid, group = 1), size = 2, alpha = 0.8) +
xlab("Date") + ylab("Number of people") + theme_bw() + scale_colour_manual(values=graphs_cols) + ylim(0, max_scale1) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
max_scale1 = max(get_max(cv_cases_canada$cases))
max_scale2 = max(get_max(cv_cases_canada$reservations))
cls = c(covid_col, death_col, recovered_col, covid_other_col, active_col)
cls_names = c("Cases", "Deaths", "Recovered", "Layoffs", "OpenTable Reservations")
graphs_cols = cls[1:length(cls_names)]
names(graphs_cols) = cls_names
g1 = ggplot(cv_cases_canada, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", country,
"\n", covid, ": ", cases,
"\n", eimpact, ": ", reservations))) +
geom_line(aes(y=cases, colour = covid, group = 1), alpha=0.8) + geom_point(aes(y=cases, colour = covid, group = 1), size = 2, alpha = 0.8) +
xlab("Date") + ylab("Number of people") + theme_bw() + scale_colour_manual(values=graphs_cols) + ylim(0, max_scale1) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
g1
covid = "Cases"
eimpact = "OpenTable Reservations"
g1 = ggplot(cv_cases_canada, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", country,
"\n", covid, ": ", cases,
"\n", eimpact, ": ", reservations))) +
geom_line(aes(y=cases, colour = covid, group = 1), alpha=0.8) + geom_point(aes(y=cases, colour = covid, group = 1), size = 2, alpha = 0.8) +
xlab("Date") + ylab("Number of people") + theme_bw() + scale_colour_manual(values=graphs_cols) + ylim(0, max_scale1) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
g1
cv_cases = read.csv("input_data/covid_geocodes.csv", encoding="UTF-8")
cv_cases_province = read.csv("input_data/covid_province.csv")
cv_cases_canada = read.csv("input_data/covid_canada.csv")
# clean date variables and extract min/max dates in data
cv_cases_province$date = as.Date(cv_cases_province$date)
cv_cases_province$last_update = as.Date(cv_cases_province$last_update)
cv_cases_canada$date = as.Date(cv_cases_canada$date)
cv_cases_canada$last_update = as.Date(cv_cases_canada$last_update)
cv_min_date = as.Date(min(cv_cases_canada$date),"%Y-%m-%d")
current_date = as.Date(max(cv_cases_canada$date),"%Y-%m-%d")
# extract time stamp for labeling
update = current_date
# map labeling
cv_cases_canada$region = "Global"
# create cv base map for front page
mlabs <- lapply(seq(nrow(cv_cases)), function(i) {
paste("<p>", "Region:", cv_cases[i, "region"], "<p></p>", "Province:", cv_cases[i, "province"], "<p></p>", "Confirmed cases:", cv_cases[i, "cases"], "<p></p>", "Deaths:", cv_cases[i, "deaths"], "<p></p>", "Recovered:", cv_cases[i, "recovered"], "</p>")
})
basemap = leaflet(options = leafletOptions(zoomControl = FALSE)) %>%
htmlwidgets::onRender("function(el, x) {L.control.zoom({ position: 'bottomright' }).addTo(this)
}") %>%
addTiles() %>%
addLayersControl(
position = "bottomright",
overlayGroups = c("2019-COVID (cumulative)", "2019-COVID (deaths)", "2019-COVID (recovered)"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup(c("2019-COVID (deaths)", "2019-COVID (recovered)"))  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
fitBounds(-105,42,-90,65) %>%
addCircleMarkers(data = cv_cases, lat = ~ lat, lng = ~ lon, weight = 3, radius = ~sqrt(cases),
fillOpacity = 0.1, color = covid_col, group = "2019-COVID (cumulative)",
label = lapply(mlabs, htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px", "color" = "#000000"),
textsize = "15px", direction = "auto")) %>%
addCircleMarkers(data = cv_cases, lat = ~ lat, lng = ~ lon, weight = 3, radius = ~sqrt(deaths),
fillOpacity = 0.1, color = death_col, group = "2019-COVID (deaths)",
label = lapply(mlabs, htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px", "color" = "#000000"),
textsize = "15px", direction = "auto")) %>%
addCircleMarkers(data = cv_cases, lat = ~ lat, lng = ~ lon, weight = 3, radius = ~sqrt(recovered),
fillOpacity = 0.1, color = recovered_col, group = "2019-COVID (recovered)",
label = lapply(mlabs, htmltools::HTML),
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px", "color" = "#000000"),
textsize = "15px", direction = "auto"))
# assign colours to provinces to ensure consistency between plots
cls = rep(c(brewer.pal(8,"Dark2"), brewer.pal(10, "Paired"), brewer.pal(12, "Set3"), brewer.pal(8,"Set2"), brewer.pal(9, "Set1"), brewer.pal(8, "Accent"),  brewer.pal(9, "Pastel1"),  brewer.pal(8, "Pastel2")),3)
cls_names = c(as.character(unique(cv_cases_province$province)), as.character(unique(cv_cases_canada$country)))
province_cols = cls[1:length(cls_names)]
names(province_cols) = cls_names
cls = c(covid_col, death_col, recovered_col, covid_other_col, active_col)
cls_names = c("Cases", "Deaths", "Recovered", "Layoffs", "OpenTable Reservations")
graphs_cols = cls[1:length(cls_names)]
names(graphs_cols) = cls_names
g1
View(cv_cases_canada)
View(cv_cases_canada)
g1 = ggplot(cv_cases_canada, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", country,
"\n", covid, ": ", cases))) +
geom_line(aes(y=cases, colour = covid, group = 1), alpha=0.8) + geom_point(aes(y=cases, colour = covid, group = 1), size = 2, alpha = 0.8) +
xlab("Date") + ylab("Number of people") + theme_bw() + scale_colour_manual(values=graphs_cols) + ylim(0, max_scale1) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
g1
subplot(g1, g1)
subplot(g1, g1, nrows=1)
runApp()
subplot(g1, g1, nrows=2)
g2 = ggplot(cv_cases_canada, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", region,
"\n", eimpact, ": ", reservations))) +
geom_line(aes(y=reservations, colour = eimpact, group = 2), alpha=0.8) + geom_point(aes(y=reservations, colour = eimpact, group = 2), size = 2, alpha = 0.8) +
xlab("Date") + ylab("YOY percentage change") + theme_bw() + scale_colour_manual(values=graphs_cols) + ylim(0, max_scale2) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
g2
View(cv_cases_canada)
View(cv_cases_canada)
View(cv_cases_canada)
View(cv_cases_canada)
subplot(g1, g2, nrows=2)
g2 = ggplot(cv_cases_canada, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", country,
"\n", eimpact, ": ", reservations))) +
geom_line(aes(y=reservations, colour = eimpact, group = 2), alpha=0.8) + geom_point(aes(y=reservations, colour = eimpact, group = 2), size = 2, alpha = 0.8) +
xlab("Date") + ylab("YOY percentage change") + theme_bw() + scale_colour_manual(values=graphs_cols) + ylim(0, max_scale2) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
g2
g2 = ggplot(cv_cases_canada, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", country,
"\n", eimpact, ": ", reservations))) +
geom_line(aes(y=reservations, colour = eimpact, group = 1), alpha=0.8) + geom_point(aes(y=reservations, colour = eimpact, group = 1), size = 2, alpha = 0.8) +
xlab("Date") + ylab("YOY percentage change") + theme_bw() + scale_colour_manual(values=graphs_cols) + ylim(0, max_scale2) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
g2
g1
View(cv_cases_canada)
View(cv_cases_canada)
runApp()
runApp()
get_min <- function(x) ifelse( !all(is.na(x)), min(x, na.rm=T), NA)
min_scale2 = get_min(cv_cases_canada$reservations)
g2 = ggplot(cv_cases_canada, aes(x = date,
text = paste0("Date: ", format(date, "%d %B %Y"),
"\n", "Region: ", country,
"\n", eimpact, ": ", reservations))) +
geom_line(aes(y=reservations, colour = eimpact, group = 1), alpha=0.8) + geom_point(aes(y=reservations, colour = eimpact, group = 1), size = 2, alpha = 0.8) +
xlab("Date") + ylab("YOY percentage change") + theme_bw() + scale_colour_manual(values=graphs_cols) + ylim(0, min_scale2) +
theme(legend.title = element_blank(), legend.position = "", plot.title = element_text(size=10), axis.title=element_text(size=10,face="bold"))
g2
subplot(g1, g2, nrows=2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/shiny/nCoV_tracker')
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/minni/OneDrive/Documents/R/shiny/nCoV_Canada_tracker")
cv_cases = read.csv("input_data/covid_geocodes.csv", encoding="UTF-8")
cv_cases_province = read.csv("input_data/covid_province.csv", stringsAsFactors = FALSE)
cv_cases_canada = read.csv("input_data/covid_canada.csv", stringsAsFactors = FALSE)
View(cv_cases_canada)
View(cv_cases_canada)
View(cv_cases_canada)
View(cv_cases_canada)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cv_cases_canada)
View(cv_cases_canada)
View(cv_cases_province)
View(cv_cases_province)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
}
list("Hello", "there")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cv_cases_canada)
View(cv_cases_canada)
runApp()
runApp()
View(cv_cases_province)
View(cv_cases_province)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/shiny/nCoV_tracker')
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
